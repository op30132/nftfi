{"version":3,"sources":["constants.js","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","components/Menu.jsx","utils/index.js","components/Loans.jsx","components/MyWallet.jsx","components/NFTDetail.jsx","components/LoanDetail.jsx","components/LoansBorrowed.jsx","components/LoansFunded.jsx","components/LoansRequest.jsx","views/Home.jsx","views/ExampleUI.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","BLOCKNATIVE_DAPPID","ALCHEMY_KEY","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","global","window","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","polygon","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","className","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","options","bridge","infuraId","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","title","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","useBurner","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","handleForm","returned","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","overrides","noContractDisplay","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","right","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","_network","Menu","activeClassName","Status","getStatus","statusId","getStatusClass","status","timeDifference","current","future","msPerMinute","msPerHour","msPerDay","msPerMonth","msPerYear","elapsed","Math","round","convertDuration","duration","days","Number","Loans","writeContracts","history","useHistory","setData","NftFiLoanBank","getBiddableLoans","res","doSomethingAsync","el","tokenID","fetch","tokenAddress","then","x","json","nftData","loanId","ID","image","image_preview_url","asset_contract","repayAmount","owner","tokenOwnerAddress","f","resolve","setTimeout","myData","job","item","getloans","src","alt","MyWallet","setLoading","assets","schema_name","collection","tokenId","token_id","getAccountNFTList","gutter","xs","md","lg","NFTDetail","isConfirming","setIsConfirming","isConfirmed","setIsConfirmed","useParams","nftaddress","isModalVisible","setIsModalVisible","isTermModalVisible","setIsTermModalVisible","setRepayAmount","setDuration","getNFTDetail","closeModal","closeTermModal","addAsCollateral","NFT","abi","nftContract","approve","approveTransaction","handleOnFireRequest","endingBidTime","setMinutes","getMinutes","proposeLoan","floor","getTime","okText","cancelText","LoadingOutlined","CheckCircleOutlined","PlusCircleOutlined","backgroundColor","ClockCircleOutlined","confirm","Modal","LoanDetail","getLoanDetail","nft","image_original_url","getloanById","bidLoan","content","closeIcon","LoansBorrowed","getLoansByBorrower","endTimestamp","payBack","repayLoan","isLoanExpired","confirmPay","LoansFunded","getLoansByLender","liqudate","updateDefaultedLoanStatusByLender","LoansRequest","getLoansByAsker","endingBidTimestamp","cancelRequest","cancelLoan","getBackNft","updateExpiredLoanStatusByBorrower","isBidExpired","isCancel","Home","readContracts","useContractReader","ExampleUI","setNewPurpose","border","encodeFunctionData","Hints","selectedToken","setSelectedToken","listOfTokens","useTokenList","showSearch","filterOption","option","children","optionFilterProp","token","symbol","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","sender","d","toISOString","newPurpose","deployWarning","paddingBottom","YourContract","setPurpose","dataSource","purposes","columns","rowKey","fetcher","graphQLParams","subgraphUri","headers","response","docExplorerOpen","query","initialNetwork","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","setAddress","selectedNetwork","useLocation","process","REACT_APP_PROVIDER","clearCachedProvider","disconnect","useExchangeEthPrice","useUserProviderAndSigner","deployedContracts","externalContracts","mainnetContracts","useOnBlock","_lastBlockNumber","Web3Provider","code","reason","connection","lte","exact","path","DAI","prevTheme","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"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","file":"static/js/main.d6d27274.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"70a64a2e0ae24663ae45232822916abd\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <div className=\"flex\">\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 16 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 22,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      // notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport { INFURA_ID, ALCHEMY_KEY } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            1: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n            42: `https://kovan.infura.io/v3/${INFURA_ID}`,\n            100: \"https://dai.poa.network\", // xDai\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    useBurner={boolean}\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  useBurner,\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      // modalButtons.push(\n      //   <Button\n      //     key=\"logoutbutton\"\n      //     style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n      //     shape=\"round\"\n      //     size=\"large\"\n      //     onClick={logoutOfWeb3Modal}\n      //   >\n      //     logout\n      //   </Button>,\n      // );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <div className=\"flex items-center\">\n      {web3Modal && web3Modal.cachedProvider ? (\n        <>\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          <Balance address={address} provider={localProvider} price={price} />\n          {/* <Wallet\n            address={address}\n            provider={localProvider}\n            signer={userSigner}\n            ensProvider={mainnetProvider}\n            price={price}\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          /> */}\n        </>\n      ) : useBurner ? (\n        \"\"\n      ) : isContract ? (\n        <>\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          <Balance address={address} provider={localProvider} price={price} />\n        </>\n      ) : (\n        \"\"\n      )}\n      {useBurner && web3Modal && !web3Modal.cachedProvider ? (\n        <>\n          <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n          <Balance address={address} provider={localProvider} price={price} />\n          <Wallet\n            address={address}\n            provider={localProvider}\n            signer={userSigner}\n            ensProvider={mainnetProvider}\n            price={price}\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          />\n        </>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"flex\">\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{fontSize:24}}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address}/>             \n            </div>\n            <div style={{ float: \"right\", marginRight: 25 }}>\n              <Balance\n                  address={address}\n                  provider={provider}\n                  price={price}\n                />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [urlArray]);\n\n  useEffect(() => {\n    handleProviders();\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray)]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n  minimized,\n}) {\n  if (minimized) return <></>;\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import React, { useState } from \"react\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport { Button } from \"antd\";\n\nimport { Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16, display: \"inline-flex\" }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","import { NavLink } from \"react-router-dom\";\nfunction Menu() {\n  return (\n    <>\n      <div className=\"menu\">\n        <NavLink to=\"/loan\" activeClassName=\"menu-active\" className=\"menu-item\">\n          Overview\n        </NavLink>\n        <NavLink to=\"/wallet\" activeClassName=\"menu-active\" className=\"menu-item\">\n          My Wallet\n        </NavLink>\n        <NavLink to=\"/requesting\" activeClassName=\"menu-active\" className=\"menu-item\">\n          Loan Request\n        </NavLink>\n        <NavLink to=\"/borrowed\" activeClassName=\"menu-active\" className=\"menu-item\">\n          Loans borrowed\n        </NavLink>\n        <NavLink to=\"/funded\" activeClassName=\"menu-active\" className=\"menu-item\">\n          Loans funded\n        </NavLink>\n      </div>\n    </>\n  );\n}\n\nexport default Menu;\n","export const displayAddress = address => {\n  return address?.substr(0, 5) + \"...\" + address?.substr(-4);\n};\n\n/**\n  0: \"unbid\",\n  1: \"bid\",\n  2: \"canceled\",\n  3: \"expired\",\n  4: \"repaid\",\n  5: \"defaulted\",\n */\nconst Status = {\n  0: \"Unmatched\",\n  1: \"Active\",\n  2: \"Canceled\",\n  3: \"Expired\",\n  4: \"Repaid\",\n  5: \"Defaulted\",\n};\nexport const getStatus = statusId => {\n  return Status[statusId];\n};\n\nexport const getStatusClass = status => {\n  switch (status) {\n    case \"1\":\n      return \"green\";\n    case \"3\":\n    case \"5\":\n      return \"red\";\n    case \"0\":\n    case \"2\":\n    case \"4\":\n      return \"blue\";\n    default:\n      break;\n  }\n};\n\nexport const timeDifference = (current, future) => {\n  var msPerMinute = 60 * 1000;\n  var msPerHour = msPerMinute * 60;\n  var msPerDay = msPerHour * 24;\n  var msPerMonth = msPerDay * 30;\n  var msPerYear = msPerDay * 365;\n\n  var elapsed = future - current;\n  if (elapsed < 0) return null;\n  if (elapsed < msPerMinute) {\n    return \"In \" + Math.round(elapsed / 1000) + \" seconds\";\n  } else if (elapsed < msPerHour) {\n    return \"In \" + Math.round(elapsed / msPerMinute) + \" minutes\";\n  } else if (elapsed < msPerDay) {\n    return \"In \" + Math.round(elapsed / msPerHour) + \" hours\";\n  } else if (elapsed < msPerMonth) {\n    return \"In \" + Math.round(elapsed / msPerDay) + \" days\";\n  } else if (elapsed < msPerYear) {\n    return \"In \" + Math.round(elapsed / msPerMonth) + \" months\";\n  } else {\n    return \"In \" + Math.round(elapsed / msPerYear) + \" years\";\n  }\n};\nexport const convertDuration = duration => {\n  const days = Number(duration) / (3600 * 24);\n  return days < 1 ? 1 : days;\n};\n","import { useEffect, useState } from \"react\";\nimport { displayAddress, convertDuration } from \"../utils\";\nimport { useHistory } from \"react-router-dom\";\nconst { ethers } = require(\"ethers\");\n\nfunction Loans({ writeContracts, tx, provider }) {\n  const history = useHistory();\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    const getloans = async () => {\n      const res = await writeContracts?.NftFiLoanBank?.getBiddableLoans();\n      if (res) {\n        const doSomethingAsync = async el => {\n          const tokenID = el.tokenID.toString();\n          const nftData = await fetch(\n            `https://testnets-api.opensea.io/api/v1/asset/${el.tokenAddress}/${tokenID}`,\n          ).then(x => x.json());\n          return {\n            loanId: el.ID.toString(),\n            image: nftData?.image_preview_url,\n            title: nftData?.asset_contract?.name,\n            amount: el.amount.toString(),\n            repayAmount: el.repayAmount.toString(),\n            duration: el.duration.toString(),\n            owner: el.tokenOwnerAddress,\n          };\n        };\n        const f = x => new Promise(resolve => setTimeout(() => resolve(doSomethingAsync(x)), 500));\n        let myData = [];\n        for (let job of res.map(x => () => f(x))) {\n          const item = await job();\n          myData.push(item);\n        }\n        setData(myData);\n      }\n    };\n    getloans();\n  }, []);\n  const gotoDetailPage = item => {\n    history.push(`/loan/${item.loanId}`);\n  };\n  if (!data) {\n    return <>loading...</>;\n  }\n  return (\n    <>\n      {data && data.length === 0 && <>no data</>}\n      {data &&\n        data.map(el => (\n          <>\n            <div className=\"list grid grid-cols-6 gap-4 row-span-full\">\n              <div className=\"image-wrapper flex align-center\">\n                <img src={el.image} alt=\"\" />\n              </div>\n              <div className=\"flex flex-col justify-center\">\n                <h3>{el.title}</h3>\n                By: {el.owner ? displayAddress(el.owner) : \"-\"}\n                <br />\n                LoanTermId: {el.loanId || \"-\"}\n              </div>\n              <div className=\"flex flex-col justify-center break-words\">\n                <h3>{ethers.utils.formatEther(el.amount)} ETH</h3>\n                <span>Principal</span>\n              </div>\n              <div className=\"flex flex-col justify-center break-words\">\n                <h3>{ethers.utils.formatEther(el.repayAmount)} ETH</h3>\n                <span>Repayment</span>\n              </div>\n              <div className=\"flex flex-col justify-center\">\n                <h3>{el.duration ? convertDuration(el.duration) : \"-\"} days</h3>\n                <span>Duration</span>\n              </div>\n              <div className=\"flex flex-col justify-center\">\n                <button onClick={() => gotoDetailPage(el)} className=\"btn btn-secondary rounded\">\n                  view detail\n                </button>\n              </div>\n            </div>\n          </>\n        ))}\n    </>\n  );\n}\n\nexport default Loans;\n","import { Row, Col } from \"antd\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction MyWallet({ address }) {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  useEffect(() => {\n    const getAccountNFTList = async address => {\n      if (!address) return;\n      const data = await fetch(`https://testnets-api.opensea.io/api/v1/assets?owner=${address}&offset=0&limit=40`)\n        .then(x => x.json())\n        .then(res => {\n          console.log(res);\n          return res?.assets\n            ?.filter(el => el.asset_contract.schema_name === \"ERC721\")\n            ?.map(el => ({\n              title: el.collection.name,\n              image: el.image_preview_url,\n              address: el.asset_contract.address,\n              tokenId: el.token_id,\n            }));\n        });\n      if (data) setData(data);\n      setLoading(false);\n    };\n    getAccountNFTList(address);\n  }, []);\n\n  const handleOnClick = item => {\n    history.push(`/wallet/${item.address}/${item.tokenId}`);\n  };\n  if (loading) {\n    return <>loading...</>;\n  }\n  if (data?.length === 0) {\n    return <>no Asset</>;\n  }\n  return (\n    <>\n      <Row gutter={[36, 36]}>\n        {data &&\n          data.map(el => (\n            <>\n              <Col xs={{ span: 12 }} md={{ span: 8 }} lg={{ span: 6 }} key={el.address}>\n                <div className=\"card animation\" onClick={() => handleOnClick(el)}>\n                  <div className=\"image-wrapper\">\n                    <img src={el.image} alt=\"\" />\n                  </div>\n                  <div className=\"card-info text-center\">\n                    <h3>{el.title}</h3>\n                    <span>#{el.tokenId}</span>\n                  </div>\n                </div>\n              </Col>\n            </>\n          ))}\n      </Row>\n    </>\n  );\n}\n\nexport default MyWallet;\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Modal } from \"antd\";\nimport { PlusCircleOutlined, LoadingOutlined, CheckCircleOutlined, ClockCircleOutlined } from \"@ant-design/icons\";\nimport NFT from \"../contracts/erc721abi.json\";\n\nconst { ethers } = require(\"ethers\");\nfunction NFTDetail({ writeContracts, userSigner, tx }) {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isConfirming, setIsConfirming] = useState(false);\n  const [isConfirmed, setIsConfirmed] = useState(false);\n\n  const { nftaddress, tokenId } = useParams();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [isTermModalVisible, setIsTermModalVisible] = useState(false);\n\n  const [amount, setAmount] = useState(\"0\");\n  const [repayAmount, setRepayAmount] = useState(\"0\");\n  const [duration, setDuration] = useState(\"30\");\n\n  useEffect(() => {\n    const getNFTDetail = async () => {\n      await fetch(`https://testnets-api.opensea.io/api/v1/asset/${nftaddress}/${tokenId}`)\n        .then(x => x.json())\n        .then(res => {\n          setData(res);\n        });\n      setLoading(false);\n    };\n    getNFTDetail();\n  }, []);\n\n  const closeModal = () => {\n    setIsModalVisible(false);\n  };\n\n  const openModal = () => {\n    setIsModalVisible(true);\n  };\n  const closeTermModal = () => {\n    setIsTermModalVisible(false);\n  };\n\n  const openTermModal = () => {\n    setIsTermModalVisible(true);\n  };\n  const addAsCollateral = async () => {\n    setIsConfirming(true);\n    const nftContract = await new ethers.Contract(nftaddress, NFT.abi, userSigner);\n    let approveTransaction = await nftContract.approve(writeContracts.NftFiLoanBank.address, Number(tokenId));\n    await approveTransaction.wait();\n    setIsConfirming(false);\n    setIsConfirmed(true);\n  };\n  const handleProcess = () => {\n    closeModal();\n    openTermModal();\n  };\n  const handleOnFireRequest = async () => {\n    let endingBidTime = new Date();\n    endingBidTime.setMinutes(endingBidTime.getMinutes() + 10);\n    setTimeout(() => {\n      closeTermModal();\n    }, 10000);\n    await tx(\n      writeContracts.NftFiLoanBank.proposeLoan(\n        nftaddress,\n        Number(tokenId),\n        ethers.utils.parseEther(amount),\n        Math.floor(endingBidTime.getTime() / 1000),\n        ethers.utils.parseEther(repayAmount),\n        Number(duration) * 60 * 60 * 24,\n      ),\n    );\n  };\n  if (loading) {\n    return <>loading...</>;\n  }\n  if (data?.length === 0) {\n    return <>no Asset</>;\n  }\n\n  return (\n    <>\n      {data && (\n        <>\n          <div className=\"flex\">\n            <div className=\"image-wrapper w-30 mr-7\">\n              <img src={data?.image_preview_url} alt=\"\" className=\"nft-detail-img\" />\n            </div>\n            <div>\n              <h3 className=\"title mb-0\">{data?.asset_contract.name}</h3>\n              <div className=\"text-base mb-4\">#{tokenId}</div>\n              <div className=\"text-base mb-4\">Owner: {data?.owner.address}</div>\n              <div>\n                <a\n                  href={`https://testnets.opensea.io/assets/${data.asset_contract.address}/${data.token_id}`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  className=\"text-blue\"\n                >\n                  View on OpenSea\n                </a>\n              </div>\n              {!isConfirming && !isConfirmed && (\n                <button className=\"btn btn-secondary mt-4\" onClick={openModal}>\n                  create loan request\n                </button>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n      <Modal\n        title=\"Create Loan Request\"\n        visible={isModalVisible}\n        onOk={handleProcess}\n        onCancel={closeModal}\n        okText={isConfirmed ? \"Set Loan Term\" : <></>}\n        cancelText={<></>}\n      >\n        <div className=\"px-4 mb-6\">\n          Set loan terms for your loan request after confirming your collateral for deposit.\n        </div>\n        <div className=\"w-full flex items-center justify-evenly\">\n          <div className=\"list-imgWrapper\">\n            <img src={data.image_preview_url} alt=\"\" />\n          </div>\n          <div className=\"p-3\">\n            <div>\n              <h2>{data?.asset_contract.name}</h2>#{tokenId}\n            </div>\n          </div>\n          <div>\n            {isConfirming && (\n              <button className=\"btn btn-secondary green flex items-center pointer-events-none\">\n                <LoadingOutlined />\n                &nbsp; Confirming\n              </button>\n            )}\n            {isConfirmed && <CheckCircleOutlined style={{ color: \"#18d8a9\", fontSize: \"32px\" }} />}\n            {!isConfirming && !isConfirmed && (\n              <button className=\"btn btn-primary flex items-center\" onClick={() => addAsCollateral()}>\n                <PlusCircleOutlined />\n                &nbsp; Confirm\n              </button>\n            )}\n          </div>\n        </div>\n      </Modal>\n      <Modal\n        title=\"Set Loan Terms\"\n        visible={isTermModalVisible}\n        onOk={handleOnFireRequest}\n        onCancel={closeTermModal}\n        okText={\"Finalize Loan Terms\"}\n        cancelText={<></>}\n      >\n        <div>How much do you want to borrow</div>\n        <div className=\"px-4 pl-12 py-3 btn-secondary rounded-md my-3 relative\">\n          <img\n            src=\"https://uploads-ssl.webflow.com/61a98989a418f6f2acefef70/61cd8eb26443af57bccb49ef_985ef003-b1f8-4c98-a482-4469a1e60738.png\"\n            alt=\"\"\n            className=\"absolute left-3 w-8 h-8\"\n          />\n          <span className=\"text-lg ml-1\">ETH</span>\n          <span className=\"text-2xl ml-3\">|</span>\n          <input\n            className=\"pl-4 text-lg outline-none w-4/5\"\n            style={{ backgroundColor: \"transparent\" }}\n            value={amount}\n            onChange={e => setAmount(e.target.value)}\n          />\n        </div>\n        <div>Set repayment amount</div>\n        <div className=\"px-4 pl-12 py-3 btn-secondary rounded-md my-3 relative\">\n          <img\n            src=\"https://uploads-ssl.webflow.com/61a98989a418f6f2acefef70/61cd8eb26443af57bccb49ef_985ef003-b1f8-4c98-a482-4469a1e60738.png\"\n            alt=\"\"\n            className=\"absolute left-3 w-8 h-8\"\n          />\n          <span className=\"text-lg ml-1\">ETH</span>\n          <span className=\"text-2xl ml-3\">|</span>\n          <input\n            className=\"pl-4 text-lg outline-none w-4/5\"\n            type=\"text \"\n            style={{ backgroundColor: \"transparent\" }}\n            value={repayAmount}\n            onChange={e => setRepayAmount(e.target.value)}\n          />\n        </div>\n        <div>Set loan duration</div>\n        <div className=\"px-4 pl-12 py-3 btn-secondary rounded-md my-3 relative\">\n          <div className=\"absolute left-4 top-4 w-8 h-8\">\n            <ClockCircleOutlined style={{ fontSize: \"22px\", color: \"#387ff3\" }} />\n          </div>\n          <span className=\"text-lg ml-1\">days</span>\n          <span className=\"text-2xl ml-3\">|</span>\n          <input\n            style={{ backgroundColor: \"transparent\" }}\n            className=\"pl-4 text-lg outline-none w-4/5\"\n            value={duration}\n            onChange={e => setDuration(e.target.value)}\n          />\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nexport default NFTDetail;\n","import { useEffect, useState } from \"react\";\nimport { Modal } from \"antd\";\nimport { getStatus, getStatusClass, convertDuration } from \"../utils\";\nimport { useParams } from \"react-router-dom\";\nconst { ethers } = require(\"ethers\");\nconst { confirm } = Modal;\nfunction LoanDetail({ writeContracts, tx, provider, balance }) {\n  const { loanId } = useParams();\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    const getloanById = async id => {\n      const res = await writeContracts?.NftFiLoanBank?.getLoanDetail(id);\n      if (res) {\n        const nft = await fetch(`https://testnets-api.opensea.io/api/v1/asset/${res.tokenAddress}/${res.tokenID}`).then(\n          x => x.json(),\n        );\n        setData({\n          image: `https://ipfs.io/ipfs/${nft?.image_original_url?.split(\"ipfs://\")?.[1]}`,\n          title: nft?.asset_contract?.name,\n          tokenAddress: res.tokenAddress,\n          tokenID: res.tokenID.toString(),\n          amount: res.amount.toString(),\n          repayAmount: res.repayAmount.toString(),\n          duration: res.duration.toString(),\n          owner: res.tokenOwnerAddress,\n          status: res.status.toString(),\n        });\n      }\n    };\n    getloanById(loanId);\n  }, []);\n\n  const openModal = () => {\n    confirm({\n      title: \"LEND FUNDS\",\n      content: \"Do you Want to lend funds on this Loan Request?\",\n      okText: \"Confirm\",\n      closeIcon: <></>,\n      cancelText: <>Cancel</>,\n      onOk() {\n        handleOnFireRequest();\n      },\n    });\n  };\n  const handleOnFireRequest = async () => {\n    await tx(writeContracts.NftFiLoanBank.bidLoan(Number(loanId), { value: ethers.BigNumber.from(data.amount) }));\n  };\n  if (!data) {\n    return <>loading...</>;\n  }\n\n  return (\n    <>\n      <div>\n        <div className={`status ${getStatusClass(data.status)}`}>{getStatus(data.status)}</div>\n      </div>\n      <div className=\"my-2\">LoanTermId: {loanId || \"-\"}</div>\n      <div className=\"text-base font-semibold my-4\">LOAN REQUEST TERMS</div>\n      <div className=\"flex justify-between pr-6\">\n        <div className=\"flex flex-col justify-center\">{data.owner || \"-\"}</div>\n        <div className=\"flex flex-col justify-center break-words\">\n          <h3>{ethers.utils.formatEther(data.amount)} ETH</h3>\n          <span>Principal</span>\n        </div>\n        <div className=\"flex flex-col justify-center break-words\">\n          <h3>{ethers.utils.formatEther(data.repayAmount)} ETH</h3>\n          <span>Repayment</span>\n        </div>\n        <div className=\"flex flex-col justify-center\">\n          <h3>{data.duration ? convertDuration(data.duration) : \"-\"} days</h3>\n          <span>Duration</span>\n        </div>\n        <button onClick={openModal} className=\"btn btn-primary h-11\">\n          Lend at these terms\n        </button>\n      </div>\n      <div className=\"text-base font-semibold my-4\">LOAN COLLATERAL</div>\n      <div className=\"w-20\">\n        <div className=\"card\">\n          <div className=\"image-wrapper\">\n            <img src={data.image} alt=\"\" />\n          </div>\n          <div className=\"card-info\">\n            <h3>{data.title}</h3>\n            <div>#{data.tokenID}</div>\n            <a\n              href={`https://testnets.opensea.io/assets/${data.tokenAddress}/${data.tokenID}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"text-blue\"\n            >\n              View on OpenSea\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default LoanDetail;\n","import { useEffect, useState } from \"react\";\nimport { displayAddress } from \"../utils\";\nimport { getStatus, getStatusClass, timeDifference } from \"../utils\";\nimport { Modal } from \"antd\";\nconst { ethers } = require(\"ethers\");\nconst { confirm } = Modal;\n\nfunction LoansBorrowed({ writeContracts, tx, provider, address }) {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    const getloans = async () => {\n      const res = await writeContracts?.NftFiLoanBank?.getLoansByBorrower(address);\n      if (!res) return;\n\n      const doSomethingAsync = async el => {\n        const tokenID = el.tokenID.toString();\n        const nftData = await fetch(`https://testnets-api.opensea.io/api/v1/asset/${el.tokenAddress}/${tokenID}`).then(\n          x => x.json(),\n        );\n        return {\n          loanId: el.ID.toString(),\n          image: nftData?.image_preview_url,\n          title: nftData?.asset_contract?.name,\n          amount: el.amount.toString(),\n          tokenId: el.tokenID.toString(),\n          repayAmount: el.repayAmount.toString(),\n          duration: el.duration.toString(),\n          owner: el.tokenOwnerAddress,\n          status: el.status.toString(),\n          endTimestamp: new Date(el.endTimestamp * 1000),\n        };\n      };\n      const f = x => new Promise(resolve => setTimeout(() => resolve(doSomethingAsync(x)), 500));\n      let myData = [];\n      for (let job of res.map(x => () => f(x))) {\n        const item = await job();\n        myData.push(item);\n      }\n      setData(myData);\n    };\n    getloans();\n  }, []);\n\n  const payBack = async el => {\n    await tx(\n      writeContracts?.NftFiLoanBank?.repayLoan(Number(el.loanId), { value: ethers.BigNumber.from(el.repayAmount) }),\n    );\n  };\n  const confirmPay = el => {\n    confirm({\n      title: \"PAY OFF THE LOAN\",\n      content: (\n        <div className=\"text-base leading-2\">\n          Total: <span className=\"text-xl font-semibold\">{ethers.utils.formatEther(el.repayAmount)} ETH</span>\n        </div>\n      ),\n      okText: \"Confirm\",\n      closeIcon: <></>,\n      cancelText: <>Cancel</>,\n      onOk() {\n        payBack(el);\n      },\n    });\n  };\n\n  if (!data) {\n    return <>loading...</>;\n  }\n  return (\n    <>\n      {data && data.length === 0 && <>no data</>}\n      {data &&\n        data.map(el => {\n          const isLoanExpired = el.status === \"1\" && timeDifference(Date.now(), el.endTimestamp) === null;\n          return (\n            <>\n              <div className=\"list grid grid-cols-6 gap-4 row-span-full\">\n                <div className=\"image-wrapper flex align-center\">\n                  <img src={el.image} alt=\"\" />\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <h3>{el.title}</h3>\n                  By: {el.owner ? displayAddress(el.owner) : \"-\"}\n                  <br />\n                  LoanTermId: {el.loanId || \"-\"}\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <div className={`status ${getStatusClass(el.status)}`}>\n                    {isLoanExpired ? \"Expired\" : getStatus(el.status)}\n                  </div>\n                  {el.status === \"1\" && !isLoanExpired && (\n                    <button onClick={() => confirmPay(el)} className=\"btn btn-primary mt-3\">\n                      Payback\n                    </button>\n                  )}\n                </div>\n                <div className=\"flex flex-col justify-center break-words\">\n                  <h3>{ethers.utils.formatEther(el.amount)} ETH</h3>\n                  <span>Principal</span>\n                </div>\n                <div className=\"flex flex-col justify-center break-words\">\n                  <h3>{ethers.utils.formatEther(el.repayAmount)} ETH</h3>\n                  <span>Repayment</span>\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <h3>{timeDifference(Date.now(), el.endTimestamp) || \"--\"}</h3>\n                  <span>Due Date</span>\n                </div>\n              </div>\n            </>\n          );\n        })}\n    </>\n  );\n}\n\nexport default LoansBorrowed;\n","import { useEffect, useState } from \"react\";\nimport { displayAddress } from \"../utils\";\nimport { getStatus, getStatusClass, timeDifference } from \"../utils\";\nconst { ethers } = require(\"ethers\");\n\nfunction LoansFunded({ writeContracts, tx, address }) {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    const getloans = async () => {\n      const res = await writeContracts?.NftFiLoanBank?.getLoansByLender(address);\n      if (!res) return;\n\n      const doSomethingAsync = async el => {\n        const tokenID = el.tokenID.toString();\n        const nftData = await fetch(`https://testnets-api.opensea.io/api/v1/asset/${el.tokenAddress}/${tokenID}`).then(\n          x => x.json(),\n        );\n        console.log(res);\n\n        return {\n          loanId: el.ID.toString(),\n          image: nftData?.image_preview_url,\n          title: nftData?.asset_contract?.name,\n          amount: el.amount.toString(),\n          repayAmount: el.repayAmount.toString(),\n          duration: el.duration.toString(),\n          owner: el.tokenOwnerAddress,\n          status: el.status.toString(),\n          endTimestamp: new Date(el.endTimestamp * 1000),\n        };\n      };\n      const f = x => new Promise(resolve => setTimeout(() => resolve(doSomethingAsync(x)), 600));\n      let myData = [];\n      for (let job of res.map(x => () => f(x))) {\n        const item = await job();\n        myData.push(item);\n      }\n      setData(myData);\n    };\n    getloans();\n  }, []);\n  if (!data) {\n    return <>loading...</>;\n  }\n  const liqudate = async loanId => {\n    await tx(writeContracts.NftFiLoanBank.updateDefaultedLoanStatusByLender(Number(loanId)));\n  };\n  return (\n    <>\n      {data && data.length === 0 && <>no data</>}\n      {data &&\n        data.map(el => {\n          const isLoanExpired = el.status === \"1\" && timeDifference(Date.now(), el.endTimestamp) === null;\n          return (\n            <>\n              <div className=\"list grid grid-cols-6 gap-4 row-span-full\">\n                <div className=\"image-wrapper flex align-center\">\n                  <img src={el.image} alt=\"\" />\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <h3>{el.title}</h3>\n                  By: {el.owner ? displayAddress(el.owner) : \"-\"}\n                  <br />\n                  LoanTermId: {el.loanId || \"-\"}\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <div className={`status ${getStatusClass(el.status)}`}>\n                    {isLoanExpired ? \"Expired\" : getStatus(el.status)}\n                  </div>\n                  {isLoanExpired && (\n                    <button onClick={() => liqudate(el.loanId)} className=\"btn btn-primary mt-3\">\n                      Liqudate\n                    </button>\n                  )}\n                </div>\n                <div className=\"flex flex-col justify-center break-words\">\n                  <h3>{ethers.utils.formatEther(el.amount)} ETH</h3>\n                  <span>Principal</span>\n                </div>\n                <div className=\"flex flex-col justify-center break-words\">\n                  <h3>{ethers.utils.formatEther(el.repayAmount)} ETH</h3>\n                  <span>Repayment</span>\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <h3>{timeDifference(Date.now(), el.endTimestamp) || \"--\"}</h3>\n                  <span>Due Date</span>\n                </div>\n              </div>\n            </>\n          );\n        })}\n    </>\n  );\n}\n\nexport default LoansFunded;\n","import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { getStatus, getStatusClass, timeDifference, convertDuration } from \"../utils\";\nconst { ethers } = require(\"ethers\");\n\nfunction LoansRequest({ writeContracts, tx, provider, address }) {\n  const history = useHistory();\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    const getloans = async () => {\n      const res = await writeContracts?.NftFiLoanBank?.getLoansByAsker(address);\n      if (!res) return;\n      const doSomethingAsync = async el => {\n        const tokenID = el.tokenID.toString();\n        const nftData = await fetch(`https://testnets-api.opensea.io/api/v1/asset/${el.tokenAddress}/${tokenID}`).then(\n          x => x.json(),\n        );\n        return {\n          loanId: el.ID.toString(),\n          image: nftData?.image_preview_url,\n          title: nftData?.asset_contract?.name,\n          amount: el.amount.toString(),\n          repayAmount: el.repayAmount.toString(),\n          duration: el.duration.toString(),\n          owner: el.tokenOwnerAddress,\n          status: el.status.toString(),\n          endingBidTimestamp: el.endingBidTimestamp ? new Date(el.endingBidTimestamp * 1000) : null,\n          endTimestamp: el.endTimestamp ? new Date(el.endTimestamp * 1000) : null,\n        };\n      };\n      const f = x => new Promise(resolve => setTimeout(() => resolve(doSomethingAsync(x)), 800));\n      let myData = [];\n      for (let job of res.map(x => () => f(x))) {\n        const item = await job();\n        myData.push(item);\n      }\n      setData(myData);\n    };\n    getloans();\n  }, []);\n  const cancelRequest = async loanId => {\n    await tx(writeContracts.NftFiLoanBank.cancelLoan(Number(loanId)));\n  };\n  const getBackNft = async loanId => {\n    await tx(writeContracts.NftFiLoanBank.updateExpiredLoanStatusByBorrower(Number(loanId)));\n  };\n\n  if (!data) {\n    return <>loading...</>;\n  }\n\n  return (\n    <>\n      {data && data.length === 0 && <>no data</>}\n      {data &&\n        data.map(el => {\n          console.log(el.endingBidTimestamp);\n          const isLoanExpired = el.status === \"1\" && timeDifference(new Date(), el.endTimestamp) === null;\n          const isBidExpired = el.status === \"0\" && el.endingBidTimestamp.getTime() - new Date().getTime() < 0;\n          const isCancel = el.status === \"0\" && el.endingBidTimestamp.getTime() - new Date().getTime() > 0;\n          return (\n            <>\n              <div className=\"list grid grid-cols-6 gap-4 row-span-full\">\n                <div className=\"image-wrapper flex align-center\">\n                  <img src={el.image} alt=\"\" />\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <h3>{el.title}</h3>\n                  LoanTermId: {el.loanId || \"-\"}\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <div className={`status ${getStatusClass(el.status)}`}>\n                    {isLoanExpired ? \"Expired\" : isBidExpired ? \"Outdated\" : getStatus(el.status)}\n                  </div>\n                  {isCancel && (\n                    <button onClick={() => cancelRequest(el.loanId)} className=\"btn btn-primary mt-3\">\n                      Cancel\n                    </button>\n                  )}\n                  {isBidExpired && (\n                    <button onClick={() => getBackNft(el.loanId)} className=\"btn btn-primary mt-3\">\n                      Take NFT back\n                    </button>\n                  )}\n                </div>\n                <div className=\"flex flex-col justify-center break-words\">\n                  <h3>{ethers.utils.formatEther(el.amount)} ETH</h3>\n                  <span>Principal</span>\n                </div>\n                <div className=\"flex flex-col justify-center break-words\">\n                  <h3>{ethers.utils.formatEther(el.repayAmount)} ETH</h3>\n                  <span>Repayment</span>\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <h3>{el.duration ? convertDuration(el.duration) : \"-\"} days</h3>\n                  <span>Duration</span>\n                </div>\n              </div>\n            </>\n          );\n        })}\n    </>\n  );\n}\n\nexport default LoansRequest;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useContractReader } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\n\n/**\n * web3 props can be passed from '../App.jsx' into your local view component for use\n * @param {*} yourLocalBalance balance on current network\n * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/\n * @returns react component\n */\nfunction Home({ yourLocalBalance, readContracts }) {\n  // you can also use hooks locally in your component of choice\n  // in this case, let's keep track of 'purpose' variable from our contract\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  return <>home page</>;\n}\n\nexport default Home;\n","import { SyncOutlined } from \"@ant-design/icons\";\nimport { utils } from \"ethers\";\nimport { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, Balance, Events } from \"../components\";\n\nexport default function ExampleUI({\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h2>Example UI:</h2>\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />{\" \"}\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => {\n              /* look how you call setPurpose on your contract: */\n              /* notice how you pass a call back for tx updates too */\n              const result = tx(writeContracts?.NftFiLoanBank?.getBiddableLoans());\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\n              console.log(await result);\n            }}\n          >\n            getBiddableLoans\n          </Button>\n        </div>\n        <Divider />\n        Your Address:\n        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />\n        <Divider />\n        ENS Address Example:\n        <Address\n          address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" /* this will show as austingriffith.eth */\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <div>OR</div>\n        <Balance address={address} provider={localProvider} price={price} />\n        <Divider />\n        <div>🐳 Example Whale Balance:</div>\n        <Balance balance={utils.parseEther(\"1000\")} provider={localProvider} price={price} />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <Divider />\n        Your Contract Address:\n        <Address\n          address={readContracts && readContracts.NftFiLoanBank ? readContracts.NftFiLoanBank.address : null}\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how you call setPurpose on your contract: */\n              // tx(writeContracts.NftFiLoanBank.setPurpose(\"🍻 Cheers\"));\n            }}\n          >\n            Set Purpose to &quot;🍻 Cheers&quot;\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /*\n              you can also just craft a transaction and send it to the tx() transactor\n              here we are sending value straight to the contract's address:\n            */\n              tx({\n                to: writeContracts.NftFiLoanBank.address,\n                value: utils.parseEther(\"0.001\"),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Send Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* you can also just craft a transaction and send it to the tx() transactor */\n              tx({\n                to: writeContracts.NftFiLoanBank.address,\n                value: utils.parseEther(\"0.001\"),\n                data: writeContracts.NftFiLoanBank.interface.encodeFunctionData(\"setPurpose(string)\", [\n                  \"🤓 Whoa so 1337!\",\n                ]),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Another Example\n          </Button>\n        </div>\n      </div>\n\n      {/*\n        📑 Maybe display a list of events?\n          (uncomment the event and emit line in NftFiLoanBank.sol! )\n      */}\n      {/* <Events\n        contracts={readContracts}\n        contractName=\"NftFiLoanBank\"\n        eventName=\"LoanCreated\"\n        localProvider={localProvider}\n        mainnetProvider={mainnetProvider}\n        startBlock={1}\n      /> */}\n    </div>\n  );\n}\n","import { utils } from \"ethers\";\nimport { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, AddressInput } from \"../components\";\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import { Col, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Route, Switch, useLocation, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Ramp,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n  Menu,\n  ThemeSwitch,\n  Loans,\n  MyWallet,\n  NFTDetail,\n  LoanDetail,\n  LoansBorrowed,\n  LoansFunded,\n  LoansRequest,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\n  const { currentTheme } = useThemeSwitcher();\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[2]);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"staker\", \"purpose\");\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  // useEffect(() => {\n  //   if (\n  //     DEBUG &&\n  //     mainnetProvider &&\n  //     address &&\n  //     selectedChainId &&\n  //     yourLocalBalance &&\n  //     yourMainnetBalance &&\n  //     readContracts &&\n  //     writeContracts &&\n  //     mainnetContracts\n  //   ) {\n  //     console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n  //     console.log(\"🌎 mainnetProvider\", mainnetProvider);\n  //     console.log(\"🏠 localChainId\", localChainId);\n  //     console.log(\"👩‍💼 selected address:\", address);\n  //     console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n  //     console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n  //     console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n  //     console.log(\"📝 readContracts\", readContracts);\n  //     console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n  //     console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n  //     console.log(\"🔐 writeContracts\", writeContracts);\n  //   }\n  // }, [\n  //   mainnetProvider,\n  //   address,\n  //   selectedChainId,\n  //   yourLocalBalance,\n  //   yourMainnetBalance,\n  //   readContracts,\n  //   writeContracts,\n  //   mainnetContracts,\n  //   localChainId,\n  //   myMainnetDAIBalance,\n  // ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div className=\"App\">\n      <div className={\"ui \" + currentTheme}>\n        <div className=\"aside\">\n          <div className=\"logo\">\n            <Link to=\"/\">NFTFi</Link>\n          </div>\n          <Menu />\n        </div>\n        <div className=\"main\">\n          <div className=\"header\">\n            {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n              <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\n            )}\n            {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n            <NetworkDisplay\n              minimized={true}\n              NETWORKCHECK={NETWORKCHECK}\n              localChainId={localChainId}\n              selectedChainId={selectedChainId}\n              targetNetwork={targetNetwork}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n            />\n            {USE_NETWORK_SELECTOR && (\n              <div style={{ marginRight: 20 }}>\n                <NetworkSwitch\n                  networkOptions={networkOptions}\n                  selectedNetwork={selectedNetwork}\n                  setSelectedNetwork={setSelectedNetwork}\n                />\n              </div>\n            )}\n            <Account\n              useBurner={USE_BURNER_WALLET}\n              address={address}\n              localProvider={localProvider}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              web3Modal={web3Modal}\n              loadWeb3Modal={loadWeb3Modal}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              blockExplorer={blockExplorer}\n              minimized={false}\n            />\n            <ThemeSwitch />\n          </div>\n          <Switch>\n            <Route exact path=\"/\">\n              {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n              <Home yourLocalBalance={yourLocalBalance} readContracts={readContracts} />\n            </Route>\n            <Route exact path=\"/loan\">\n              <Loans\n                provider={localProvider}\n                address={address}\n                writeContracts={writeContracts}\n                readContracts={readContracts}\n                tx={tx}\n              />\n            </Route>\n            <Route exact path=\"/loan/:loanId\">\n              <LoanDetail\n                provider={localProvider}\n                address={address}\n                writeContracts={writeContracts}\n                readContracts={readContracts}\n                tx={tx}\n                balance={yourLocalBalance}\n              />\n            </Route>\n            <Route exact path=\"/wallet\">\n              <MyWallet address={address} />\n            </Route>\n            <Route path=\"/wallet/:nftaddress/:tokenId\">\n              <NFTDetail\n                userSigner={userSigner}\n                address={address}\n                writeContracts={writeContracts}\n                readContracts={readContracts}\n                provider={localProvider}\n                blockExplorer={blockExplorer}\n                contractConfig={contractConfig}\n                chainId={selectedChainId}\n                tx={tx}\n              />\n            </Route>\n            <Route exact path=\"/requesting\">\n              <LoansRequest\n                provider={localProvider}\n                address={address}\n                writeContracts={writeContracts}\n                readContracts={readContracts}\n                tx={tx}\n              />\n            </Route>\n            <Route exact path=\"/funded\">\n              <LoansFunded\n                provider={localProvider}\n                address={address}\n                writeContracts={writeContracts}\n                readContracts={readContracts}\n                tx={tx}\n              />\n            </Route>\n            <Route exact path=\"/borrowed\">\n              <LoansBorrowed\n                provider={localProvider}\n                address={address}\n                writeContracts={writeContracts}\n                readContracts={readContracts}\n                tx={tx}\n              />\n            </Route>\n            <Route exact path=\"/debug\">\n              {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n              <Contract\n                name=\"staker\"\n                price={price}\n                signer={userSigner}\n                provider={localProvider}\n                address={address}\n                blockExplorer={blockExplorer}\n                contractConfig={contractConfig}\n              />\n            </Route>\n            <Route path=\"/hints\">\n              <Hints\n                address={address}\n                yourLocalBalance={yourLocalBalance}\n                mainnetProvider={mainnetProvider}\n                price={price}\n              />\n            </Route>\n            <Route path=\"/exampleui\">\n              <ExampleUI\n                address={address}\n                userSigner={userSigner}\n                mainnetProvider={mainnetProvider}\n                localProvider={localProvider}\n                yourLocalBalance={yourLocalBalance}\n                price={price}\n                tx={tx}\n                writeContracts={writeContracts}\n                readContracts={readContracts}\n              />\n            </Route>\n            <Route path=\"/mainnetdai\">\n              <Contract\n                name=\"DAI\"\n                customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n                signer={userSigner}\n                provider={mainnetProvider}\n                address={address}\n                blockExplorer=\"https://etherscan.io/\"\n                contractConfig={contractConfig}\n                chainId={1}\n              />\n              {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n            </Route>\n            <Route path=\"/subgraph\">\n              <Subgraph\n                subgraphUri={props.subgraphUri}\n                tx={tx}\n                writeContracts={writeContracts}\n                mainnetProvider={mainnetProvider}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"dark\"}>\n      <BrowserRouter>\n        <App subgraphUri={subgraphUri} />\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}